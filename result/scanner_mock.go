// Code generated by MockGen. DO NOT EDIT.
// Source: result/scanner.go
//
// Generated by this command:
//
//	mockgen -source=result/scanner.go -destination=result/scanner_mock.go -package=result
//

// Package result is a generated GoMock package.
package result

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
	isgomock struct{}
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScanner) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScannerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScanner)(nil).Close))
}

// ScanMap mocks base method.
func (m *MockScanner) ScanMap(dest map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanMap", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanMap indicates an expected call of ScanMap.
func (mr *MockScannerMockRecorder) ScanMap(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanMap", reflect.TypeOf((*MockScanner)(nil).ScanMap), dest)
}

// ScanMaps mocks base method.
func (m *MockScanner) ScanMaps(dest *[]map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanMaps", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanMaps indicates an expected call of ScanMaps.
func (mr *MockScannerMockRecorder) ScanMaps(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanMaps", reflect.TypeOf((*MockScanner)(nil).ScanMaps), dest)
}

// ScanStruct mocks base method.
func (m *MockScanner) ScanStruct(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanStruct", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStruct indicates an expected call of ScanStruct.
func (mr *MockScannerMockRecorder) ScanStruct(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStruct", reflect.TypeOf((*MockScanner)(nil).ScanStruct), dest)
}

// ScanStructs mocks base method.
func (m *MockScanner) ScanStructs(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanStructs", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStructs indicates an expected call of ScanStructs.
func (mr *MockScannerMockRecorder) ScanStructs(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStructs", reflect.TypeOf((*MockScanner)(nil).ScanStructs), dest)
}

// ScanWriter mocks base method.
func (m *MockScanner) ScanWriter(dest io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanWriter", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanWriter indicates an expected call of ScanWriter.
func (mr *MockScannerMockRecorder) ScanWriter(dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanWriter", reflect.TypeOf((*MockScanner)(nil).ScanWriter), dest)
}
